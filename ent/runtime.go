// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ArifulProtik/sheba-api/ent/auth"
	"github.com/ArifulProtik/sheba-api/ent/category"
	"github.com/ArifulProtik/sheba-api/ent/location"
	"github.com/ArifulProtik/sheba-api/ent/schema"
	"github.com/ArifulProtik/sheba-api/ent/service"
	"github.com/ArifulProtik/sheba-api/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authFields := schema.Auth{}.Fields()
	_ = authFields
	// authDescIsBlocked is the schema descriptor for is_blocked field.
	authDescIsBlocked := authFields[2].Descriptor()
	// auth.DefaultIsBlocked holds the default value on creation for the is_blocked field.
	auth.DefaultIsBlocked = authDescIsBlocked.Default.(bool)
	// authDescCreatedAt is the schema descriptor for created_at field.
	authDescCreatedAt := authFields[3].Descriptor()
	// auth.DefaultCreatedAt holds the default value on creation for the created_at field.
	auth.DefaultCreatedAt = authDescCreatedAt.Default.(func() time.Time)
	// authDescID is the schema descriptor for id field.
	authDescID := authFields[0].Descriptor()
	// auth.DefaultID holds the default value on creation for the id field.
	auth.DefaultID = authDescID.Default.(func() uuid.UUID)
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = categoryDescName.Validators[0].(func(string) error)
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryFields[1].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescCreatedAt is the schema descriptor for created_at field.
	locationDescCreatedAt := locationFields[1].Descriptor()
	// location.DefaultCreatedAt holds the default value on creation for the created_at field.
	location.DefaultCreatedAt = locationDescCreatedAt.Default.(func() time.Time)
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescTitle is the schema descriptor for title field.
	serviceDescTitle := serviceFields[1].Descriptor()
	// service.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	service.TitleValidator = serviceDescTitle.Validators[0].(func(string) error)
	// serviceDescAdditionalCost is the schema descriptor for additional_cost field.
	serviceDescAdditionalCost := serviceFields[6].Descriptor()
	// service.DefaultAdditionalCost holds the default value on creation for the additional_cost field.
	service.DefaultAdditionalCost = serviceDescAdditionalCost.Default.(float64)
	// serviceDescCreatedAt is the schema descriptor for created_at field.
	serviceDescCreatedAt := serviceFields[7].Descriptor()
	// service.DefaultCreatedAt holds the default value on creation for the created_at field.
	service.DefaultCreatedAt = serviceDescCreatedAt.Default.(func() time.Time)
	// serviceDescID is the schema descriptor for id field.
	serviceDescID := serviceFields[0].Descriptor()
	// service.DefaultID holds the default value on creation for the id field.
	service.DefaultID = serviceDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[5].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsProvider is the schema descriptor for is_provider field.
	userDescIsProvider := userFields[6].Descriptor()
	// user.DefaultIsProvider holds the default value on creation for the is_provider field.
	user.DefaultIsProvider = userDescIsProvider.Default.(bool)
	// userDescIsAdmin is the schema descriptor for is_admin field.
	userDescIsAdmin := userFields[7].Descriptor()
	// user.DefaultIsAdmin holds the default value on creation for the is_admin field.
	user.DefaultIsAdmin = userDescIsAdmin.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[8].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
