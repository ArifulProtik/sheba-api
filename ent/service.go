// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ArifulProtik/sheba-api/ent/service"
	"github.com/ArifulProtik/sheba-api/ent/user"
	"github.com/google/uuid"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Instrument holds the value of the "instrument" field.
	Instrument []string `json:"instrument,omitempty"`
	// Locationid holds the value of the "locationid" field.
	Locationid int `json:"locationid,omitempty"`
	// Categoryid holds the value of the "categoryid" field.
	Categoryid int `json:"categoryid,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost float64 `json:"cost,omitempty"`
	// AdditionalCost holds the value of the "additional_cost" field.
	AdditionalCost float64 `json:"additional_cost,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges        ServiceEdges `json:"edges"`
	user_service *uuid.UUID
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldInstrument:
			values[i] = new([]byte)
		case service.FieldCost, service.FieldAdditionalCost:
			values[i] = new(sql.NullFloat64)
		case service.FieldLocationid, service.FieldCategoryid:
			values[i] = new(sql.NullInt64)
		case service.FieldTitle:
			values[i] = new(sql.NullString)
		case service.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case service.FieldID:
			values[i] = new(uuid.UUID)
		case service.ForeignKeys[0]: // user_service
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Service", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case service.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case service.FieldInstrument:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field instrument", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Instrument); err != nil {
					return fmt.Errorf("unmarshal field instrument: %w", err)
				}
			}
		case service.FieldLocationid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locationid", values[i])
			} else if value.Valid {
				s.Locationid = int(value.Int64)
			}
		case service.FieldCategoryid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field categoryid", values[i])
			} else if value.Valid {
				s.Categoryid = int(value.Int64)
			}
		case service.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				s.Cost = value.Float64
			}
		case service.FieldAdditionalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field additional_cost", values[i])
			} else if value.Valid {
				s.AdditionalCost = value.Float64
			}
		case service.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case service.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_service", values[i])
			} else if value.Valid {
				s.user_service = new(uuid.UUID)
				*s.user_service = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Service entity.
func (s *Service) QueryUser() *UserQuery {
	return (&ServiceClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return (&ServiceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", instrument=")
	builder.WriteString(fmt.Sprintf("%v", s.Instrument))
	builder.WriteString(", locationid=")
	builder.WriteString(fmt.Sprintf("%v", s.Locationid))
	builder.WriteString(", categoryid=")
	builder.WriteString(fmt.Sprintf("%v", s.Categoryid))
	builder.WriteString(", cost=")
	builder.WriteString(fmt.Sprintf("%v", s.Cost))
	builder.WriteString(", additional_cost=")
	builder.WriteString(fmt.Sprintf("%v", s.AdditionalCost))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service

func (s Services) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
