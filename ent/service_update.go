// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ArifulProtik/sheba-api/ent/predicate"
	"github.com/ArifulProtik/sheba-api/ent/service"
	"github.com/ArifulProtik/sheba-api/ent/user"
	"github.com/google/uuid"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *ServiceUpdate) SetTitle(s string) *ServiceUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetInstrument sets the "instrument" field.
func (su *ServiceUpdate) SetInstrument(s []string) *ServiceUpdate {
	su.mutation.SetInstrument(s)
	return su
}

// ClearInstrument clears the value of the "instrument" field.
func (su *ServiceUpdate) ClearInstrument() *ServiceUpdate {
	su.mutation.ClearInstrument()
	return su
}

// SetLocationid sets the "locationid" field.
func (su *ServiceUpdate) SetLocationid(i int) *ServiceUpdate {
	su.mutation.ResetLocationid()
	su.mutation.SetLocationid(i)
	return su
}

// AddLocationid adds i to the "locationid" field.
func (su *ServiceUpdate) AddLocationid(i int) *ServiceUpdate {
	su.mutation.AddLocationid(i)
	return su
}

// SetCategoryid sets the "categoryid" field.
func (su *ServiceUpdate) SetCategoryid(i int) *ServiceUpdate {
	su.mutation.ResetCategoryid()
	su.mutation.SetCategoryid(i)
	return su
}

// AddCategoryid adds i to the "categoryid" field.
func (su *ServiceUpdate) AddCategoryid(i int) *ServiceUpdate {
	su.mutation.AddCategoryid(i)
	return su
}

// SetCost sets the "cost" field.
func (su *ServiceUpdate) SetCost(f float64) *ServiceUpdate {
	su.mutation.ResetCost()
	su.mutation.SetCost(f)
	return su
}

// AddCost adds f to the "cost" field.
func (su *ServiceUpdate) AddCost(f float64) *ServiceUpdate {
	su.mutation.AddCost(f)
	return su
}

// SetAdditionalCost sets the "additional_cost" field.
func (su *ServiceUpdate) SetAdditionalCost(f float64) *ServiceUpdate {
	su.mutation.ResetAdditionalCost()
	su.mutation.SetAdditionalCost(f)
	return su
}

// SetNillableAdditionalCost sets the "additional_cost" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableAdditionalCost(f *float64) *ServiceUpdate {
	if f != nil {
		su.SetAdditionalCost(*f)
	}
	return su
}

// AddAdditionalCost adds f to the "additional_cost" field.
func (su *ServiceUpdate) AddAdditionalCost(f float64) *ServiceUpdate {
	su.mutation.AddAdditionalCost(f)
	return su
}

// ClearAdditionalCost clears the value of the "additional_cost" field.
func (su *ServiceUpdate) ClearAdditionalCost() *ServiceUpdate {
	su.mutation.ClearAdditionalCost()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ServiceUpdate) SetCreatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableCreatedAt(t *time.Time) *ServiceUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *ServiceUpdate) SetUserID(id uuid.UUID) *ServiceUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *ServiceUpdate) SetUser(u *User) *ServiceUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *ServiceUpdate) ClearUser() *ServiceUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServiceUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := service.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Service.title": %w`, err)}
		}
	}
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Service.user"`)
	}
	return nil
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldTitle,
		})
	}
	if value, ok := su.mutation.Instrument(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: service.FieldInstrument,
		})
	}
	if su.mutation.InstrumentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: service.FieldInstrument,
		})
	}
	if value, ok := su.mutation.Locationid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLocationid,
		})
	}
	if value, ok := su.mutation.AddedLocationid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLocationid,
		})
	}
	if value, ok := su.mutation.Categoryid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldCategoryid,
		})
	}
	if value, ok := su.mutation.AddedCategoryid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldCategoryid,
		})
	}
	if value, ok := su.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldCost,
		})
	}
	if value, ok := su.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldCost,
		})
	}
	if value, ok := su.mutation.AdditionalCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldAdditionalCost,
		})
	}
	if value, ok := su.mutation.AddedAdditionalCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldAdditionalCost,
		})
	}
	if su.mutation.AdditionalCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: service.FieldAdditionalCost,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreatedAt,
		})
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetTitle sets the "title" field.
func (suo *ServiceUpdateOne) SetTitle(s string) *ServiceUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetInstrument sets the "instrument" field.
func (suo *ServiceUpdateOne) SetInstrument(s []string) *ServiceUpdateOne {
	suo.mutation.SetInstrument(s)
	return suo
}

// ClearInstrument clears the value of the "instrument" field.
func (suo *ServiceUpdateOne) ClearInstrument() *ServiceUpdateOne {
	suo.mutation.ClearInstrument()
	return suo
}

// SetLocationid sets the "locationid" field.
func (suo *ServiceUpdateOne) SetLocationid(i int) *ServiceUpdateOne {
	suo.mutation.ResetLocationid()
	suo.mutation.SetLocationid(i)
	return suo
}

// AddLocationid adds i to the "locationid" field.
func (suo *ServiceUpdateOne) AddLocationid(i int) *ServiceUpdateOne {
	suo.mutation.AddLocationid(i)
	return suo
}

// SetCategoryid sets the "categoryid" field.
func (suo *ServiceUpdateOne) SetCategoryid(i int) *ServiceUpdateOne {
	suo.mutation.ResetCategoryid()
	suo.mutation.SetCategoryid(i)
	return suo
}

// AddCategoryid adds i to the "categoryid" field.
func (suo *ServiceUpdateOne) AddCategoryid(i int) *ServiceUpdateOne {
	suo.mutation.AddCategoryid(i)
	return suo
}

// SetCost sets the "cost" field.
func (suo *ServiceUpdateOne) SetCost(f float64) *ServiceUpdateOne {
	suo.mutation.ResetCost()
	suo.mutation.SetCost(f)
	return suo
}

// AddCost adds f to the "cost" field.
func (suo *ServiceUpdateOne) AddCost(f float64) *ServiceUpdateOne {
	suo.mutation.AddCost(f)
	return suo
}

// SetAdditionalCost sets the "additional_cost" field.
func (suo *ServiceUpdateOne) SetAdditionalCost(f float64) *ServiceUpdateOne {
	suo.mutation.ResetAdditionalCost()
	suo.mutation.SetAdditionalCost(f)
	return suo
}

// SetNillableAdditionalCost sets the "additional_cost" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableAdditionalCost(f *float64) *ServiceUpdateOne {
	if f != nil {
		suo.SetAdditionalCost(*f)
	}
	return suo
}

// AddAdditionalCost adds f to the "additional_cost" field.
func (suo *ServiceUpdateOne) AddAdditionalCost(f float64) *ServiceUpdateOne {
	suo.mutation.AddAdditionalCost(f)
	return suo
}

// ClearAdditionalCost clears the value of the "additional_cost" field.
func (suo *ServiceUpdateOne) ClearAdditionalCost() *ServiceUpdateOne {
	suo.mutation.ClearAdditionalCost()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ServiceUpdateOne) SetCreatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableCreatedAt(t *time.Time) *ServiceUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *ServiceUpdateOne) SetUserID(id uuid.UUID) *ServiceUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *ServiceUpdateOne) SetUser(u *User) *ServiceUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *ServiceUpdateOne) ClearUser() *ServiceUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	var (
		err  error
		node *Service
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServiceUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := service.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Service.title": %w`, err)}
		}
	}
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Service.user"`)
	}
	return nil
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: service.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Instrument(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: service.FieldInstrument,
		})
	}
	if suo.mutation.InstrumentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: service.FieldInstrument,
		})
	}
	if value, ok := suo.mutation.Locationid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLocationid,
		})
	}
	if value, ok := suo.mutation.AddedLocationid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLocationid,
		})
	}
	if value, ok := suo.mutation.Categoryid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldCategoryid,
		})
	}
	if value, ok := suo.mutation.AddedCategoryid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldCategoryid,
		})
	}
	if value, ok := suo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldCost,
		})
	}
	if value, ok := suo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldCost,
		})
	}
	if value, ok := suo.mutation.AdditionalCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldAdditionalCost,
		})
	}
	if value, ok := suo.mutation.AddedAdditionalCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldAdditionalCost,
		})
	}
	if suo.mutation.AdditionalCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: service.FieldAdditionalCost,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreatedAt,
		})
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.UserTable,
			Columns: []string{service.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
